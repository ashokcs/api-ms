---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "Mine API"
basePath: "/CI"
schemes:
- "https"
paths:
  /points/provider/cashin:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: "quantity"
        in: "query"
        required: false
        type: "string"
      - name: "longitude"
        in: "query"
        required: false
        type: "string"
      - name: "latitude"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"

      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlCatalogs}/get/pointCashIn"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.querystring.latitude: "method.request.querystring.latitude"
          integration.request.querystring.longitude: "method.request.querystring.longitude"
          integration.request.querystring.quantity: "method.request.querystring.quantity"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /v1/account-mgm/users/validation/{documentType}:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "documentType"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/Validation"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-mgm/users/validation/{documentType}"
        requestParameters:
          integration.request.path.documentType: "method.request.path.documentType"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /customer-management/notification:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: userId
        in: query
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification"
        requestParameters:
          integration.request.querystring.userId: method.request.querystring.userId
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/Notification"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  '/v1/accounts/{accountId}/payment':
    post:
      tags:
        - payment-api
      summary: create
      operationId: createUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: accountId
          in: path
          description: accountId
          required: true
          type: string
          format: uuid
        - in: body
          name: request
          description: request
          required: true
          schema:
            $ref: '#/definitions/PaymentRequestDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentOrder'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
        - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/accounts/{accountId}/payment"
        requestParameters:
          integration.request.path.accountId: "method.request.path.accountId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:  
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
securityDefinitions:
  MineAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      providerARNs:
      - "arn:aws:cognito-idp:us-east-1:271902360581:userpool/us-east-1_jhaytbPSF"
      type: "cognito_user_pools"

definitions:
  ResponseStatus:
    type: "object"
    properties:
      code:
        type: "string"
        description: "The HTTP code"
      message:
        type: "string"
        description: "A description message"
  Validation:
    type: "object"
    properties:
      phone:
        type: "string"
        description: "Phone miner"
      face:
        type: "string"
        description: "Person face image"
      back:
        type: "string"
        description: "Image back of the document"
      front:
        type: "string"
        description: "Image front of the document"
  Notification:
    type: "object"
    properties:
      userId:
        type: "string"
        format: "uuid"
        description: "User identifier"
      amount:
        type: "number"
        description: "amount of the transaction"
      notificationType:
        type: "string"
        description: "Type of the notification"
      messageType:
        type: "string"
        description: "Type of the message"
      messageBody:
        type: "string"
        description: "Body of the message"
      pusherChannel:
        type: "string"
        description: "Channel that send the message"
      pusherEvent:
        type: "string"
        description: "Event that send the message/push"
      deviceToken:
        type: "string"
        description: "deviceToken"
  Merchant:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
    title: Merchant
  PaymentRequestDto:
    type: object
    properties:
      amount:
        type: number
      currency:
        type: string
      description:
        type: string
      extraParams:
        type: object
        additionalProperties:
          type: string
      merchantId:
        type: string
        format: uuid
      type:
        type: string
        enum:
          - IN
          - OUT
    title: PaymentRequestDto
  PaymentOrder:
    type: object
    properties:
      accountId:
        type: string
        format: uuid
      amount:
        type: number
      currency:
        type: string
      description:
        type: string
      id:
        type: string
        format: uuid
      merchant:
        $ref: '#/definitions/Merchant'
      paymentCode:
        type: string
      processedDate:
        type: string
        format: date-time
      requestedDate:
        type: string
        format: date-time
      state:
        type: string
        enum:
          - PENDING
          - CANCELED
          - REQUESTED
          - CONFIRMED
      type:
        type: string
        enum:
          - IN
          - OUT
    title: PaymentOrder
