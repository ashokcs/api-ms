---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "Mine API DEV"
basePath: "/DEV"
schemes:
- "https"
paths:
  /points/provider/cashin:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: "quantity"
        in: "query"
        required: false
        type: "string"
      - name: "longitude"
        in: "query"
        required: false
        type: "string"
      - name: "latitude"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"

      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlCatalogs}/get/pointCashIn"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.querystring.latitude: "method.request.querystring.latitude"
          integration.request.querystring.longitude: "method.request.querystring.longitude"
          integration.request.querystring.quantity: "method.request.querystring.quantity"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  # START USERS-MS
  /v1/device-management/devices:
    post:
      tags:
      - device-management
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/Device"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/device-management/devices"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/account-management/users/contacts/filters:
    post:
      tags:
      - filters
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/Contact"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-management/users/contacts/filters"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  # END USERS-MS
  # START ONBOARDING-MS
  /v1/onboarding/authorization/{id}/create:
    post:
      tags:
      - onboarding
      summary: authCreateUser
      operationId: authCreateUserUsingPOST
      consumes:
      - application/json
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - in: body
        name: userAuthData
        description: userAuthData
        required: true
        schema:
          $ref: '#/definitions/UserAuthData'
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/onboarding/authorization/{id}/create"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"

  /v1/onboarding/confirm/{id}:
    put:
      tags:
      - onboarding
      summary: confirmUser
      operationId: confirmUserUsingPUT
      consumes:
      - application/json
      produces:
      - "application/json"
      parameters:
      - in: body
        name: confirmData
        description: confirmData
        required: true
        schema:
          $ref: '#/definitions/ConfirmData'
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/onboarding/confirm/{id}"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"

  /v1/onboarding/create:
    post:
      tags:
      - onboarding
      summary: createUser
      operationId: createUserUsingPOST
      consumes:
      - application/json
      produces:
      - "application/json"
      parameters:
      - in: body
        name: createData
        description: createData
        required: true
        schema:
          $ref: '#/definitions/CreateData'
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/onboarding/create"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"

  /v1/onboarding/sign/{id}:
    put:
      tags:
      - onboarding
      summary: signUser
      operationId: signUserUsingPUT
      consumes:
      - application/json
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/onboarding/sign/{id}"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"

  /v1/onboarding/validate/{id}:
    put:
      tags:
      - onboarding
      summary: validateUser
      operationId: validateUserUsingPUT
      consumes:
      - application/json
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - in: body
        name: validationData
        description: validationData
        required: true
        schema:
          $ref: '#/definitions/ValidationData'
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/onboarding/validate/{id}"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
  # END ONBOARDING-MS
  # START SOFT-ONBOARDING-MS
  /v1/soft-onboarding/users:
    post:
      tags:
        - soft-onboarding-controller
      summary: createUser
      operationId: createUserUsingPOST_1
      consumes:
        - application/json
      produces:
        - 'application/json'
      parameters:
        - in: body
          name: userLogin
          description: userLogin
          required: true
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MinerDTO"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/soft-onboarding/users"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/soft-onboarding/users/{id}/confirm-phone:
    patch:
      tags:
        - soft-onboarding-controller
      summary: confirmPhone
      operationId: confirmPhoneUsingPATCH
      consumes:
        - application/json
      produces:
        - 'application/json'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
          format: uuid
        - in: body
          name: phoneValidation
          description: phoneValidation
          required: true
          schema:
            $ref: '#/definitions/UserPhoneValidation'
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MinerDTO"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/soft-onboarding/users/{id}/confirm-phone"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"
  /v1/soft-onboarding/users/{id}/update-personal-data:
    patch:
      tags:
        - soft-onboarding-controller
      summary: updatePersonalData
      operationId: updatePersonalDataUsingPATCH
      consumes:
        - application/json
      produces:
        - 'application/json'
      parameters:
        - in: body
          name: data
          description: data
          required: true
          schema:
            $ref: '#/definitions/UserPersonalData'
        - name: id
          in: path
          description: id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MinerDTO"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/soft-onboarding/users/{id}/update-personal-data"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"
  /v1/soft-onboarding/users/{id}/update-phone:
    patch:
      tags:
        - soft-onboarding-controller
      summary: updatePhone
      operationId: updatePhoneUsingPATCH
      consumes:
        - application/json
      produces:
        - 'application/json'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
          format: uuid
        - in: body
          name: phone
          description: phone
          required: true
          schema:
            $ref: '#/definitions/UserPhone'
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MinerDTO"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/soft-onboarding/users/{id}/update-phone"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"
  /v1/soft-onboarding/users/{id}/update-address:
    patch:
      tags:
        - soft-onboarding-controller
      summary: updateAddress
      operationId: updateAddressUsingPATCH
      consumes:
        - application/json
      produces:
        - 'application/json'
      parameters:
        - in: body
          name: addressInfo
          description: addressInfo
          required: true
          schema:
            $ref: '#/definitions/AddressInfo'
        - name: id
          in: path
          description: id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MinerDTO"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/soft-onboarding/users/{id}/update-address"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"
  /v1/soft-onboarding/users/{id}/accept-terms:
    post:
      tags:
        - soft-onboarding-controller
      summary: acceptTerms
      operationId: acceptTermsUsingPATCH
      consumes:
        - application/json
      produces:
        - 'application/json'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
          format: uuid
        - in: body
          name: signUp
          description: signUp
          required: true
          schema:
            $ref: '#/definitions/SignUp'
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/MinerDTO"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/soft-onboarding/users/{id}/accept-terms"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/soft-onboarding/regions:
    get:
      tags:
        - soft-onboarding-controller
      summary: getRegions
      operationId: getRegionsUsingGET
      produces:
        - 'application/json'
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Region"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/soft-onboarding/regions"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /v1/soft-onboarding/regions/{id}:
    get:
      tags:
        - soft-onboarding-controller
      summary: getRegionsByParent
      operationId: getRegionsByParentUsingGET
      produces:
        - 'application/json'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Region"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/soft-onboarding/regions/{id}/"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /v1/soft-onboarding/users/{id}/resend-confirmation-code:
    post:
      tags:
        - soft-onboarding-controller
      summary: resendConfirmationCode
      operationId: resendConfirmationCodeUsingPOST
      consumes:
        - application/json
      produces:
        - 'application/json'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: string
          format: uuid
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlOnboarding}/v1/soft-onboarding/users/{id}/resend-confirmation-code"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"

  # END SOFT-ONBOARDING-MS
  # START IDENTITY-PROVIDER
  /v1/provider/users/authentication/logout:
    post:
      tags:
      - identity
      summary: logout
      operationId: logoutUsingPOST
      consumes:
      - application/json
      parameters:
      - name: access-token
        in: header
        description: access-token
        required: true
        type: string
      responses:
        200:
          description: OK
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlIdentityProvider}/v1/provider/users/authentication/logout"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"

  # END IDENTITY-PROVIDER
  # START TRANSFER
  /v1/payment-management/transfers:
    post:
      tags:
      - payment-management
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: "request"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Transfer"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfers"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/payment-management/transfers/{id}:
    patch:
      tags:
      - payment-management
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: "request"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/VerificationCode"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfers/{id}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"
  /v1/payment-management/transfers/{id}/resend:
    post:
      tags:
      - payment-management
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: "request"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/VerificationCode"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfers/{id}/resend"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/payment-management/transfer-request:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/TransferRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfer-request"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: "userSenderId"
        in: path
        required: false
        type: string
        format: uuid
      - name: "userReceiverId"
        in: path
        required: false
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfer-request"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification/configuration"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payment-management/transfer-request/{requestId}:
    patch:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: requestId
        in: path
        description: requestId
        required: true
        type: string
        format: uuid
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/TransferRequestDto"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfer-request/{requestId}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.requestId: "method.request.path.requestId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: requestId
        in: path
        description: requestId
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfer-request/{requestId}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.requestId: "method.request.path.requestId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification/configuration"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payment-management/transfer-request/{requestId}/forward:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: requestId
        in: path
        description: requestId
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfer-request/{requestId}/forward"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.requestId: "method.request.path.requestId"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/payment-management/transfer-requested:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfer-requested"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification/configuration"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/customer-management/notification:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /v1/customer-management/notification-setting:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification_setting"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/NotificationConfiguration"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: Unprocessable Entity
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification_setting/me/configuration"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
          422:
            statusCode: "422"
            description: Unprocessable Entity
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
  /v1/customer-management/notification-setting/{userId}/configuration:
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: userId
        in: path
        description: userId
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: Unprocessable Entity
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification_setting/{userId}/configuration"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.userId: "method.request.path.userId"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
          422:
            statusCode: "422"
            description: Unprocessable Entity
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"

  /v1/customer-management/notification_setting/me/accounts/{id}/configuration:
    get:
      tags:
      - configuration-controller
      summary: getAccountConfig
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: Unprocessable Entity
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification_setting/me/accounts/{id}/configuration"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.id: "method.request.path.id"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
          422:
            statusCode: "422"
            description: Unprocessable Entity
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"

  /v1/customer-management/notification_setting/me/accounts/{id}/configuration/{type}:
    patch:
      tags:
      - configuration-controller
      summary: updateAccountConfig
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: body
        name: ruleData
        description: ruleData
        required: true
        schema:
          $ref: '#/definitions/RuleData'
      - name: type
        in: path
        description: type
        required: true
        type: string
        enum:
        - REMINDER
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: Unprocessable Entity
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification_setting/me/accounts/{id}/configuration/{type}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.id: "method.request.path.id"
          integration.request.path.type: "method.request.path.type"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
          422:
            statusCode: "422"
            description: Unprocessable Entity
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"

  /v1/customer-management/notification_setting/me/accounts/{id}/configuration/{type}/items:
    get:
      tags:
      - configuration-controller
      summary: getItemAccountConfig
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: type
        in: path
        description: type
        required: true
        type: string
        enum:
        - REMINDER
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: Unprocessable Entity
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification_setting/me/accounts/{id}/configuration/{type}/items"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.id: "method.request.path.id"
          integration.request.path.type: "method.request.path.type"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
          422:
            statusCode: "422"
            description: Unprocessable Entity
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"

    patch:
      tags:
      - configuration-controller
      summary: createItemAccountConfig
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: body
        name: items
        description: items
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/ItemAccountConfigData'
      - name: type
        in: path
        description: type
        required: true
        type: string
        enum:
        - REMINDER
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: Unprocessable Entity
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification_setting/me/accounts/{id}/configuration/{type}/items"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.id: "method.request.path.id"
          integration.request.path.type: "method.request.path.type"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
          422:
            statusCode: "422"
            description: Unprocessable Entity
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"

  /v1/account-management/accounts/{id}/movement-history:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        required: true
        type: "string"
        format: "uuid"
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlMovementHistoryAdapter}/v1/account-management/accounts/{id}/movement-history"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  '/v1/customer-management/notification/{messageId}':
    put:
      tags:
      - notification-controller
      summary: updateNotificationUserById
      operationId: updateNotificationUserByIdUsingPUT
      consumes:
      - application/json
      parameters:
      - name: messageId
        in: path
        description: messageId
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        '200':
          description: OK
          schema:
            type: object
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '401':
          description: Unauthorized
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '403':
          description: Forbidden
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '404':
          description: Not Found
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification/{messageId}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.messageId: "method.request.path.messageId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
  /v1/sales-services/accounts/{id}/payment:
    post:
      tags:
      - payment-api
      summary: create
      operationId: createUsingPOST
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - in: body
        name: request
        description: request
        required: true
        schema:
          $ref: '#/definitions/PaymentRequestDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentOrder'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ResponseStatus'
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/{id}/payment"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  '/v1/sales-services/accounts/{id}/payment/{paymentId}':
    put:
      tags:
      - payment-api
      summary: paymentDone
      operationId: paymentDoneUsingPUT
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: paymentId
        in: path
        description: paymentId
        required: true
        type: string
        format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentOrder'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/{id}/payment/{paymentId}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
          integration.request.path.paymentId: "method.request.path.paymentId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
  /v1/integration/notify:
    post:
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "RequestNotificationModel"
        required: true
        schema:
          $ref: "#/definitions/RequestNotificationModel"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentIntegration}/v1/integration/notify"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http_proxy"
  '/v1/integration/{merchantId}/banks':
    get:
      tags:
      - integration-payment
      summary: getBanks
      operationId: getBanksUsingGET
      produces:
      - application/json
      parameters:
      - name: merchantId
        in: path
        description: merchantId
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentIntegration}/v1/integration/{merchantId}/banks"
        requestParameters:
          integration.request.path.merchantId: "method.request.path.merchantId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /v1/account-management/accounts:
    get:
      tags:
      - account-api-controller
      summary: myAccounts
      operationId: myAccountsUsingGET
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MyAccountsResponse'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/accounts"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"

  /v1/account-management/me/accounts:
    post:
      tags:
      - account-api-controller
      consumes:
      - application/json
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: body
        name: accountTypeRequest
        description: accountTypeRequest
        required: true
        schema:
          $ref: '#/definitions/AccountTypeRequest'
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  # Final
  /v1/account-management/me/accounts/{id}/rules:
    get:
      tags:
      - user-account-api-controller
      summary: getRules
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts/{id}/rules"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"

  /v1/account-management/me/accounts/{id}/rules/{type}:
    patch:
      tags:
      - user-account-api-controller
      summary: changeState
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: body
        name: ruleData
        description: ruleData
        required: true
        schema:
          $ref: '#/definitions/RuleInputData'
      - name: type
        in: path
        description: type
        required: true
        type: string
        enum:
        - SCHEDULED_SAVINGS
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts/{id}/rules/{type}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
          integration.request.path.type: "method.request.path.type"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"

  /v1/account-management/me/accounts/{id}/rules/{type}/items:
    get:
      tags:
      - user-account-api-controller
      summary: getRuleItems
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: type
        in: path
        description: type
        required: true
        type: string
        enum:
        - SCHEDULED_SAVINGS
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts/{id}/rules/{type}/items"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
          integration.request.path.type: "method.request.path.type"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    post:
      tags:
      - user-account-api-controller
      summary: saveItem
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - in: body
        name: item
        description: item
        required: true
        schema:
          $ref: '#/definitions/ItemAccountRuleData'
      - name: type
        in: path
        description: type
        required: true
        type: string
        enum:
        - SCHEDULED_SAVINGS
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts/{id}/rules/{type}/items"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
          integration.request.path.type: "method.request.path.type"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"

    patch:
      tags:
      - user-account-api-controller
      summary: updateItems
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - in: body
        name: items
        description: items
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/ItemAccountRuleBatchData'
      - name: type
        in: path
        description: type
        required: true
        type: string
        enum:
        - SCHEDULED_SAVINGS
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts/{id}/rules/{type}/items"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
          integration.request.path.type: "method.request.path.type"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"

  /v1/account-management/me/accounts/{id}/rules/{type}/items/{itemId}:
    delete:
      tags:
      - user-account-api-controller
      summary: deleteItem
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: itemId
        in: path
        description: itemId
        required: true
        type: string
        format: uuid
      - name: type
        in: path
        description: type
        required: true
        type: string
        enum:
        - SCHEDULED_SAVINGS
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts/{id}/rules/{type}/items/{itemId}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
          integration.request.path.type: "method.request.path.type"
          integration.request.path.itemId: "method.request.path.itemId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"

  #Inicio

  /v1/account-management/me/accounts/{id}:
    get:
      tags:
      - account-api-controller
      summary: load
      operationId: loadUsingGET
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts/{id}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    patch:
      tags:
      - account-api-controller
      consumes:
      - application/json
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: body
        name: accountTypeUpdateRequest
        description: accountTypeUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/AccountTypeUpdateRequest'
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts/{id}"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        httpMethod: "PATCH"
        type: "http"
    delete:
      tags:
      - account-api-controller
      consumes:
      - application/json
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/me/accounts/{id}"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"

  /v1/account-management/accounts/{id}/transaction:
    get:
      tags:
      - transaction-api
      summary: list
      operationId: listUsingGET
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TransactionListResource'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransactions}/v1/account-management/accounts/{id}/transaction"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /v1/account-management/users/requests:
    post:
      tags:
      - transference-request
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/Transference"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-management/users/requests"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  #START IDENTITY PROVIDER MS
  /v1/provider/users/policies/password:
    get:
      tags:
      - onboarding
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PasswordPattern"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlIdentityProvider}/v1/provider/users/policies/password"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  #END IDENTITY PROVIDER MS

  /v1/account-management/users/logout:
    post:
      tags:
      - onboarding
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-management/users/logout"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"

  /v1/sales-services/accounts/payment_suggested:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: suggested_state
        in: query
        description: suggested_state
        required: true
        type: string
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/payment_suggested"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.querystring.suggested_state: "method.request.querystring.suggested_state"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/payment_suggested"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
    post:
      tags:
      - payment-suggested
      summary: create
      operationId: createUsingPOST
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: body
        name: request
        description: request
        required: true
        schema:
          $ref: '#/definitions/CreatePaymentSuggestedDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CreatePaymentSuggestedDto'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ResponseStatus'
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/payment_suggested"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
    put:
      tags:
      - payment-suggested
      summary: create
      operationId: createUsingPUT
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: body
        name: request
        description: request
        required: true
        schema:
          $ref: '#/definitions/PaymentServiceRequestDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentOrder'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ResponseStatus'
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/payment_suggested"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
  /v1/sales-services/accounts/payment_suggested/{companyId}/validate:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: companyId
        in: path
        description: companyId
        required: true
        type: string
      - name: debtIdentifier
        in: query
        description: debtIdentifier
        required: true
        type: string
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/payment_suggested/{companyId}/validate"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.querystring.debtIdentifier: "method.request.querystring.debtIdentifier"
          integration.request.path.companyId: "method.request.path.companyId"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/payment_suggested/{companyId}/validate"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/adapter/user-navigation/{screenCode}:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "screenCode"
        in: "path"
        required: true
        type: "string"
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUserNavigationAdapter}/v1/adapter/user-navigation/{screenCode}"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.path.screenCode: "method.request.path.screenCode"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.header.access-token: "method.request.header.access-token"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification/configuration"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payments-kyc/payments/categories:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/categories"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.header.access-token: "method.request.header.access-token"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
  /v1/payments-kyc/payments/categories/{categoryId}/companies:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: categoryId
        in: path
        description: categoryId
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/categories/{categoryId}/companies"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.categoryId: "method.request.path.categoryId"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/categories/{categoryId}/companies"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payments-kyc/payments/categories/{categoryId}/companies/{companyId}/services:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: categoryId
        in: path
        description: categoryId
        required: true
        type: string
        format: uuid
      - name: companyId
        in: path
        description: companyId
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/categories/{categoryId}/companies/{companyId}/services"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.categoryId: "method.request.path.categoryId"
          integration.request.path.companyId: "method.request.path.companyId"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/categories/{categoryId}/companies/{companyId}/services"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payments-kyc/payments/{companyId}/identifiers:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: companyId
        in: path
        description: companyId
        required: true
        type: string
        format: uuid
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/{companyId}/identifiers"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestParameters:
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.companyId: "method.request.path.companyId"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/{companyId}/identifiers"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
  /v1/payments-kyc/payments/suggestions/favorites:
    post:
      tags:
      - payment-suggested
      summary: create
      operationId: createUsingPOST
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: body
        name: request
        description: request
        required: true
        schema:
          $ref: '#/definitions/SuggestedPaymentDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentOrder'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ResponseStatus'
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/suggestions/favorites"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/payments-kyc/payments/suggestions/{id}:
    delete:
      tags:
      - payment-suggested
      summary: create
      operationId: createUsingPOST
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentOrder'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ResponseStatus'
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/suggestions/{id}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "DELETE"
        type: "http"
    post:
      tags:
      - payment-suggested
      summary: create
      operationId: createUsingPOST
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: id
        in: path
        description: id
        required: true
        type: string
        format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentOrder'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '400':
          description: Bad Request
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ResponseStatus'
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/payments-kyc/payments/suggestions/{id}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.header.x-mine-user-id: "context.authorizer.claims.custom:user_id"
          integration.request.path.id: "method.request.path.id"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
securityDefinitions:
  MineAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      providerARNs:
      - "arn:aws:cognito-idp:us-east-1:271902360581:userpool/us-east-1_oBqMQWBUh"
      type: "cognito_user_pools"

definitions:
  ResponseStatus:
    type: "object"
    properties:
      code:
        type: "string"
        description: "The HTTP code"
      message:
        type: "string"
        description: "A description message"
  Validation:
    type: "object"
    properties:
      documentType:
        type: "string"
        description: "document type"
        enum:
        - CHILE_OLD_ID
        - CHILE_NEW_ID
        - PASSPORT
        - PERU_OLD_ID
      face:
        type: "string"
        description: "Person face image"
      back:
        type: "string"
        description: "Image back of the document"
      front:
        type: "string"
        description: "Image front of the document"
      angle:
        type: "string"
        description: "rotate angle of back and front image"
  Notification:
    type: "object"
    properties:
      userId:
        type: "string"
        format: "uuid"
        description: "User identifier"
      amount:
        type: "number"
        description: "amount of the transaction"
      notificationType:
        type: "string"
        description: "Type of the notification"
      messageType:
        type: "string"
        description: "Type of the message"
      messageBody:
        type: "string"
        description: "Body of the message"
      pusherChannel:
        type: "string"
        description: "Channel that send the message"
      pusherEvent:
        type: "string"
        description: "Event that send the message/push"
      deviceToken:
        type: "string"
        description: "deviceToken"
  NotificationConfiguration:
    type: "object"
    properties:
      notificationConfigurationList:
        type: array
        items:
          $ref: '#/definitions/Configuration'
  Region:
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
    title: Region
  SignUp:
    type: object
    properties:
      password:
        type: string
    title: SignUp
  AddressInfo:
    type: object
    properties:
      apartment:
        type: string
      regionCode:
        type: integer
        format: int32
      street:
        type: string
      streetNumber:
        type: string
    title: AddressInfo
  UserLogin:
    type: object
    properties:
      email:
        type: string
    title: UserLogin
  UserPersonalData:
    type: object
    properties:
      documentNumber:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      state:
        type: string
        enum:
          - PENDING
          - VALIDATED
          - UNCONFIRMED
          - ACTIVE
    title: UserPersonalData
  UserPhone:
    type: object
    properties:
      countryCode:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
    title: UserPhone
  UserPhoneValidation:
    type: object
    properties:
      code:
        type: string
      password:
        type: string
    title: UserPhoneValidation
  Configuration:
    type: object
    properties:
      enable:
        type: boolean
      unitTime:
        type: string
      quantity:
        type: string
      configurationMasterId:
        type: number
    title: Account
  Merchant:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
    title: Merchant
  PaymentRequestDto:
    type: object
    properties:
      amount:
        type: number
      currency:
        type: string
      description:
        type: string
      extraParams:
        type: object
        additionalProperties:
          type: string
      merchantId:
        type: string
        format: uuid
      type:
        type: string
        enum:
        - IN
        - OUT
    title: PaymentRequestDto
  PaymentOrder:
    type: object
    properties:
      accountId:
        type: string
        format: uuid
      amount:
        type: number
      currency:
        type: string
      description:
        type: string
      id:
        type: string
        format: uuid
      merchant:
        $ref: '#/definitions/Merchant'
      paymentCode:
        type: string
      processedDate:
        type: string
        format: date-time
      requestedDate:
        type: string
        format: date-time
      state:
        type: string
        enum:
        - PENDING
        - CANCELED
        - REQUESTED
        - CONFIRMED
      type:
        type: string
        enum:
        - IN
        - OUT
    title: PaymentOrder
  Response:
    type: object
    properties:
      appUrl:
        type: string
      banks:
        type: array
        items:
          $ref: '#/definitions/BankParent'
      paymentId:
        type: string
      paymentUrl:
        type: string
      readyForTerminal:
        type: boolean
      simplifiedTransferUrl:
        type: string
      transferUrl:
        type: string
    title: Response
  BankParent:
    type: object
    properties:
      banks:
        type: array
        items:
          $ref: '#/definitions/Bank'
      id:
        type: string
      minAmount:
        type: number
        format: double
      name:
        type: string
    title: Bank
  Bank:
    type: object
    properties:
      id:
        type: string
      minAmount:
        type: number
        format: double
      name:
        type: string
    title: Bank
  Empty:
    type: "object"
    title: "Empty Schema"
  RequestNotificationModel:
    type: "object"
    required:
    - "api_version"
    - "notification_token"
    properties:
      api_version:
        type: "string"
      notification_token:
        type: "string"
    title: "Request Notification Model"
  Account:
    type: object
    properties:
      balanceAmount:
        type: number
      balanceCurrency:
        type: string
      id:
        type: string
        format: uuid
      userId:
        type: string
        format: uuid
    title: Account
  MyAccountsResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          $ref: '#/definitions/Account'
    title: MyAccountsResponse
  Device:
    type: object
    properties:
      notificationId:
        type: string
      deviceType:
        type: string
        enum:
        - IOS
        - ANDROID
  Contact:
    type: object
    properties:
      phones:
        type: array
        items:
          type: string
  Currency:
    type: string
    enum:
    - CLP
    - PEN
  CounterParty:
    type: object
    properties:
      id:
        type: string
        format: uuid
      merchantId:
        type: string
        format: uuid
      name:
        type: string
      userId:
        type: string
        format: uuid
    title: CounterParty
  AccountTransaction:
    type: object
    properties:
      accountId:
        type: string
        format: uuid
      amount:
        type: number
      balance_amount:
        type: number
      balance_currency:
        type: string
      completed:
        type: string
        format: date-time
      currency:
        type: string
      description:
        type: string
      id:
        type: string
        format: uuid
      state:
        type: string
      to:
        $ref: '#/definitions/CounterParty'
      type:
        type: string
    title: AccountTransaction
  TransactionListResource:
    type: object
    properties:
      transactions:
        type: array
        items:
          $ref: '#/definitions/AccountTransaction'
    title: TransactionListResource
  Transfer:
    type: object
    properties:
      type:
        type: string
        enum:
        - P2P
      target:
        type: string
      amount:
        type: string
      note:
        type: string
      currency:
        $ref: '#/definitions/Currency'
  SuggestedPaymentDto:
    type: object
    properties:
      totalDebt:
        type: number
      currentBalance:
        type: number
      userId:
        type: string
        format: uuid
      paymentCompanyId:
        type: string
      paymentCompanyName:
        type: string
      categoryId:
        type: string
        format: uuid
      categoryName:
        type: string
      debtsMessage:
        type: string
      userIdentifier:
        type: string
      identifierType:
        type: string
      favorite:
        type: boolean
      suggestedState:
        type: boolean
      registerDateTime:
        type: string
      updateDateTime:
        type: string
      transactionNumber:
        type: string
      paymentIdentifier:
        type: string
      accountId:
        type: string
        format: uuid
      currency:
        type: string
      lstDebtsDetail:
        type: array
        items:
          $ref: '#/definitions/DebtsDetailDto'
  CreatePaymentSuggestedDto:
    type: object
    properties:
      lstPaymentSuggested:
        type: array
        items:
          $ref: '#/definitions/PaymentServiceRequestDto'
  FavoriteDto:
    type: object
    properties:
      id:
        type: string
        format: uuid
      userIdentifier:
        type: string
        format: uuid
      paymentIdentifier:
        type: string
      paymentCompanyId:
        type: string
      paymentCompanyName:
        type: string
      identifierType:
        type: string
      favoriteState:
        type: boolean
  DebtsDetailDto:
    type: object
    properties:
      debtsType:
        type: string
      debtsAmount:
        type: number
      debtsDescriptionType:
        type: string
      state:
        type: boolean
  PaymentServiceRequestDto:
    type: object
    properties:
    userIdentifier:
      type: string
    paymentIdentifier:
      type: string
    amount:
      type: string
    currentBalance:
      type: string
    companyId:
      type: string
    companyCode:
      type: string
    lstPaymentSuggested:
      type: array
      items:
        $ref: '#/definitions/DebtsDetailDto'
  TransferRequest:
    type: object
    properties:
      phone:
        type: string
      message:
        type: string
      amount:
        type: number
  TransferRequestDto:
    type: object
    properties:
      id:
        type: string
        format: uuid
      userSenderId:
        type: string
        format: uuid
      userReceiverId:
        type: string
        format: uuid
      note:
        type: string
      currencySymbol:
        type: string
      firstNameSender:
        type: string
      lastNameSender:
        type: string
      firstNameReceiver:
        type: string
      lastNameReceiver:
        type: string
      readStatus:
        type: string
      requestedDate:
        type: string
      processedDate:
        type: string
      forwardedDate:
        type: string
      amount:
        type: number
      description:
        type: string
  Transference:
    type: object
    properties:
      phone:
        type: string
      message:
        type: string
      amount:
        type: number
  UserCreate:
    type: object
    properties:
      email:
        type: string
  PasswordPattern:
    type: object
    properties:
      regexLowerLetter:
        type: string
      regexUpperLetter:
        type: string
      regexNumber:
        type: string
      regexSpecialCharacter:
        type: string
      regexMinLength:
        type: string
  ConfirmData:
    type: object
    properties:
      address:
        type: string
      code:
        type: string
      password:
        type: string
      profession:
        type: string
    title: ConfirmData
  CreateData:
    type: object
    properties:
      email:
        type: string
    title: CreateData
  CredentialResponseDTO:
    type: object
    properties:
      accessToken:
        type: string
      idToken:
        type: string
    title: CredentialResponseDTO
  IdentityResponseDTO:
    type: object
    properties:
      address:
        type: string
      birthdayDate:
        type: string
      document:
        type: string
      documentType:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
        format: uuid
      lastName:
        type: string
    title: IdentityResponseDTO
  MinerDTO:
    type: object
    properties:
      address:
        type: string
      countryCode:
        type: string
      document:
        type: string
      documentType:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
        format: uuid
      idIdentityProvider:
        type: string
        format: uuid
      lastName:
        type: string
      phone:
        type: string
      state:
        type: string
        enum:
          - PENDING
          - VALIDATED
          - UNCONFIRMED
          - ACTIVE
    title: MinerDTO
  UserAuthData:
    type: object
    properties:
      password:
        type: string
      phone:
        type: string
    title: UserAuthData
  ValidationData:
    type: object
    properties:
      angle:
        type: string
      back:
        type: string
      documentType:
        type: string
        enum:
        - CHILE_OLD_ID
        - CHILE_NEW_ID
        - PASSPORT
        - PERU_OLD_ID
      face:
        type: string
      front:
        type: string
    title: ValidationData
  VerificationCode:
    type: object
    properties:
      code:
        type: string
  AccountTypeRequest:
    type: object
    properties:
      currency:
        type: string
        enum:
        - CLP
        - PEN
      pocketDetail:
        $ref: '#/definitions/PocketRequest'
      type:
        type: string
        enum:
        - CURRENT
        - POCKET
    title: AccountTypeRequest
  AccountTypeUpdateRequest:
    type: object
    properties:
      pocket:
        $ref: '#/definitions/PocketRequest'
    title: AccountTypeUpdateRequest
  PocketRequest:
    type: object
    properties:
      amount:
        type: number
      avatarLinkId:
        type: string
      endDate:
        type: string
        format: date-time
      estimatedAmount:
        type: number
      name:
        type: string
      startDate:
        type: string
        format: date-time
    title: PocketRequest
  RuleData:
    type: object
    properties:
      status:
        type: boolean
    title: RuleData
  ItemAccountConfigData:
    type: object
    properties:
      description:
        type: string
      id:
        type: string
        enum:
        - RULE_GOAL_FINALIZED
        - RULE_GOAL_AMOUNT
        - RULE_GOAL_DATE
        - VALIDATE_RULE
      status:
        type: boolean
      value:
        type: string
    title: ItemAccountConfigData
  RuleInputData:
    type: object
    properties:
      status:
        type: boolean
    title: RuleInputData
  ItemAccountRuleData:
    type: object
    properties:
      active:
        type: boolean
      amount:
        type: number
      frequency:
        type: integer
        format: int32
    title: ItemAccountRuleData
  ItemAccountRuleBatchData:
    type: object
    properties:
      active:
        type: boolean
      amount:
        type: number
      frequency:
        type: integer
        format: int32
      id:
        type: string
        format: uuid
    title: ItemAccountRuleBatchData

