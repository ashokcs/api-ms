---
swagger: "2.0"
info:
  version: "1.0.0"
  title: "Mine API"
basePath: "/DEV"
schemes:
- "https"
paths:
  /points/provider/cashin:
    get:
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: "quantity"
        in: "query"
        required: false
        type: "string"
      - name: "longitude"
        in: "query"
        required: false
        type: "string"
      - name: "latitude"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"

      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlCatalogs}/get/pointCashIn"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.querystring.latitude: "method.request.querystring.latitude"
          integration.request.querystring.longitude: "method.request.querystring.longitude"
          integration.request.querystring.quantity: "method.request.querystring.quantity"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /v1/account-management/users/anon:
    post:
      tags:
      - onboarding
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/UserCreate"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-management/users/anon"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/account-management/users/anon/{userId}:
    put:
      tags:
      - onboarding
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "userId"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/Validation"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-management/users/anon/{userId}"
        requestParameters:
          integration.request.path.userId: "method.request.path.userId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
  /v1/account-management/users/confirmation/{id}:
    put:
      tags:
      - onboarding
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: "id"
        in: "path"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-management/users/confirmation/{id}"
        requestParameters:
          integration.request.path.id: "method.request.path.id"
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
  /v1/account-management/users/signed:
    post:
      tags:
      - onboarding
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-management/users/signed"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/account-management/users/contacts/filters:
    post:
      tags:
      - filters
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/Contact"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-management/users/contacts/filters"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/payment-management/transfers:
    post:
      tags:
      - payment-management
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: "request"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Transfer"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransfers}/v1/payment-management/transfers"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /v1/device-management/devices:
    post:
      tags:
      - device-management
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/Device"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/device-management/devices"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  /customer-management/notification:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /customer-management/notification/configuration:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification/configuration"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification/configuration"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "OPTIONS"
        type: "http"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/NotificationConfiguration"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification/configuration"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  '/v1/customer-management/notification/{messageId}':
    put:
      tags:
      - notification-controller
      summary: updateNotificationUserById
      operationId: updateNotificationUserByIdUsingPUT
      consumes:
      - application/json
      parameters:
      - name: messageId
        in: path
        description: messageId
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        '200':
          description: OK
          schema:
            type: object
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '401':
          description: Unauthorized
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '403':
          description: Forbidden
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '404':
          description: Not Found
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlNotification}/v1/customer-management/notification/{messageId}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.messageId: "method.request.path.messageId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          401:
            statusCode: "401"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          500:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
  '/v1/sales-services/accounts/{accountId}/payment':
    post:
      tags:
      - payment-api
      summary: create
      operationId: createUsingPOST
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: accountId
        in: path
        description: accountId
        required: true
        type: string
        format: uuid
      - in: body
        name: request
        description: request
        required: true
        schema:
          $ref: '#/definitions/PaymentRequestDto'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentOrder'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/{accountId}/payment"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.accountId: "method.request.path.accountId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
  '/v1/sales-services/accounts/{accountId}/payment/{paymentId}':
    put:
      tags:
      - payment-api
      summary: paymentDone
      operationId: paymentDoneUsingPUT
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - name: accountId
        in: path
        description: accountId
        required: true
        type: string
        format: uuid
      - name: paymentId
        in: path
        description: paymentId
        required: true
        type: string
        format: uuid
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PaymentOrder'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentOrder}/v1/sales-services/accounts/{accountId}/payment/{paymentId}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.accountId: "method.request.path.accountId"
          integration.request.path.paymentId: "method.request.path.paymentId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "PUT"
        type: "http"
  /v1/integration/notify:
    post:
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "Content-Type"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "RequestNotificationModel"
        required: true
        schema:
          $ref: "#/definitions/RequestNotificationModel"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentIntegration}/v1/integration/notify"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http_proxy"
  '/v1/integration/{merchantId}/banks':
    get:
      tags:
      - integration-payment
      summary: getBanks
      operationId: getBanksUsingGET
      produces:
      - application/json
      parameters:
      - name: merchantId
        in: path
        description: merchantId
        required: true
        type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Response'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlPaymentIntegration}/v1/integration/{merchantId}/banks"
        requestParameters:
          integration.request.path.merchantId: "method.request.path.merchantId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /v1/account-management/accounts:
    get:
      tags:
      - account-api-controller
      summary: myAccounts
      operationId: myAccountsUsingGET
      produces:
      - application/json
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MyAccountsResponse'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/accounts"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  '/v1/account-management/accounts/{accountId}':
    get:
      tags:
      - account-api-controller
      summary: load
      operationId: loadUsingGET
      produces:
      - application/json
      parameters:
      - name: accountId
        in: path
        description: accountId
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Account'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlAccounts}/v1/account-management/accounts/{accountId}"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.accountId: "method.request.path.accountId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  '/v1/account-management/accounts/{accountId}/transaction':
    get:
      tags:
      - transaction-api
      summary: list
      operationId: listUsingGET
      produces:
      - application/json
      parameters:
      - name: accountId
        in: path
        description: accountId
        required: true
        type: string
        format: uuid
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TransactionListResource'
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlTransactions}/v1/account-management/accounts/{accountId}/transaction"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
          integration.request.path.accountId: "method.request.path.accountId"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "GET"
        type: "http"
  /v1/account-management/users/requests:
    post:
      tags:
      - transference-request
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "access-token"
        in: "header"
        required: true
        type: "string"
      - in: "body"
        name: "request"
        required: true
        schema:
          $ref: "#/definitions/Transference"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
          headers:
            X-Requested-With:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
        400:
          description: "400 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        401:
          description: "401 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        422:
          description: "422 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
        500:
          description: "500 response"
          schema:
            $ref: "#/definitions/ResponseStatus"
      security:
      - MineAuth: []
      x-amazon-apigateway-integration:
        uri: "http://${stageVariables.urlUsers}/v1/account-management/users/requests"
        requestParameters:
          integration.request.header.access-token: "method.request.header.access-token"
        responses:
          200:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,PUT,PATCH,OPTIONS'"
              method.response.header.X-Requested-With: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-requested-with'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
          400:
            statusCode: "400"
          401:
            statusCode: "401"
          422:
            statusCode: "422"
          500:
            statusCode: "500"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "http"
securityDefinitions:
  MineAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      providerARNs:
      - "arn:aws:cognito-idp:us-east-1:271902360581:userpool/us-east-1_jhaytbPSF"
      type: "cognito_user_pools"

definitions:
  ResponseStatus:
    type: "object"
    properties:
      code:
        type: "string"
        description: "The HTTP code"
      message:
        type: "string"
        description: "A description message"
  Validation:
    type: "object"
    properties:
      documentType:
        type: "string"
        description: "document type"
        enum:
        - CHILE_OLD_ID
        - CHILE_NEW_ID
        - PASSPORT
        - PERU_OLD_ID
      face:
        type: "string"
        description: "Person face image"
      back:
        type: "string"
        description: "Image back of the document"
      front:
        type: "string"
        description: "Image front of the document"
  Notification:
    type: "object"
    properties:
      userId:
        type: "string"
        format: "uuid"
        description: "User identifier"
      amount:
        type: "number"
        description: "amount of the transaction"
      notificationType:
        type: "string"
        description: "Type of the notification"
      messageType:
        type: "string"
        description: "Type of the message"
      messageBody:
        type: "string"
        description: "Body of the message"
      pusherChannel:
        type: "string"
        description: "Channel that send the message"
      pusherEvent:
        type: "string"
        description: "Event that send the message/push"
      deviceToken:
        type: "string"
        description: "deviceToken"
  NotificationConfiguration:
    type: "object"
    properties:
      userId:
        type: "string"
        format: "uuid"
        description: "User identifier"
      notificationConfigurationList:
        type: array
        items:
          $ref: '#/definitions/Configuration'
  Configuration:
    type: object
    properties:
      id:
        type: string
        format: uuid
      serviceId:
        type: string
        format: uuid
      enable:
        type: boolean
      unitTime:
        type: string
      quantity:
        type: string
      configurationMasterId:
        type: number
    title: Account
  Merchant:
    type: object
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
    title: Merchant
  PaymentRequestDto:
    type: object
    properties:
      amount:
        type: number
      currency:
        type: string
      description:
        type: string
      extraParams:
        type: object
        additionalProperties:
          type: string
      merchantId:
        type: string
        format: uuid
      type:
        type: string
        enum:
        - IN
        - OUT
    title: PaymentRequestDto
  PaymentOrder:
    type: object
    properties:
      accountId:
        type: string
        format: uuid
      amount:
        type: number
      currency:
        type: string
      description:
        type: string
      id:
        type: string
        format: uuid
      merchant:
        $ref: '#/definitions/Merchant'
      paymentCode:
        type: string
      processedDate:
        type: string
        format: date-time
      requestedDate:
        type: string
        format: date-time
      state:
        type: string
        enum:
        - PENDING
        - CANCELED
        - REQUESTED
        - CONFIRMED
      type:
        type: string
        enum:
        - IN
        - OUT
    title: PaymentOrder
  Response:
    type: object
    properties:
      appUrl:
        type: string
      banks:
        type: array
        items:
          $ref: '#/definitions/BankParent'
      paymentId:
        type: string
      paymentUrl:
        type: string
      readyForTerminal:
        type: boolean
      simplifiedTransferUrl:
        type: string
      transferUrl:
        type: string
    title: Response
  BankParent:
    type: object
    properties:
      banks:
        type: array
        items:
          $ref: '#/definitions/Bank'
      id:
        type: string
      minAmount:
        type: number
        format: double
      name:
        type: string
    title: Bank
  Bank:
    type: object
    properties:
      id:
        type: string
      minAmount:
        type: number
        format: double
      name:
        type: string
    title: Bank
  Empty:
    type: "object"
    title: "Empty Schema"
  RequestNotificationModel:
    type: "object"
    required:
    - "api_version"
    - "notification_token"
    properties:
      api_version:
        type: "string"
      notification_token:
        type: "string"
    title: "Request Notification Model"
  Account:
    type: object
    properties:
      balanceAmount:
        type: number
      balanceCurrency:
        type: string
      id:
        type: string
        format: uuid
      userId:
        type: string
        format: uuid
    title: Account
  MyAccountsResponse:
    type: object
    properties:
      accounts:
        type: array
        items:
          $ref: '#/definitions/Account'
    title: MyAccountsResponse
  Device:
    type: object
    properties:
      notificationId:
        type: string
      deviceType:
        type: string
        enum:
        - IOS
        - ANDROID
  Contact:
    type: object
    properties:
      phones:
        type: array
        items:
          type: string
  Currency:
    type: string
    enum:
    - CLP
    - PEN
  CounterParty:
    type: object
    properties:
      id:
        type: string
        format: uuid
      merchantId:
        type: string
        format: uuid
      name:
        type: string
      userId:
        type: string
        format: uuid
    title: CounterParty
  AccountTransaction:
    type: object
    properties:
      accountId:
        type: string
        format: uuid
      amount:
        type: number
      balance_amount:
        type: number
      balance_currency:
        type: string
      completed:
        type: string
        format: date-time
      currency:
        type: string
      description:
        type: string
      id:
        type: string
        format: uuid
      state:
        type: string
      to:
        $ref: '#/definitions/CounterParty'
      type:
        type: string
    title: AccountTransaction
  TransactionListResource:
    type: object
    properties:
      transactions:
        type: array
        items:
          $ref: '#/definitions/AccountTransaction'
    title: TransactionListResource
  Transfer:
    type: object
    properties:
      type:
        type: string
        enum:
        - P2P
      target:
        type: string
      amount:
        type: string
      note:
        type: string
      currency:
        $ref: '#/definitions/Currency'
  Transference:
    type: object
    properties:
      phone:
        type: string
      message:
        type: string
      amount:
        type: number
  UserCreate:
    type: object
    properties:
      email:
        type: string